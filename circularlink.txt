package LinkList;

import java.util.NoSuchElementException;
import java.util.Scanner;

class DNode {
    int element;
    DNode next;
    DNode prev;
    public DNode(int element) {
        this.element = element;
        this.next = null;
        this.prev = null;
    }
}

public class Double {
    DNode head;
    DNode tail;
    int size;

    public int getSize() {
        return size;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public void addFirst(int element) {
        DNode newNode = new DNode(element);
        newNode.next = head;
        if (head != null)
            head.prev = newNode;
        head = newNode;
        if (tail == null)
            tail = newNode;
        size++;
        System.out.println("Adding element: " + element);
    }

    public void addLast(int element) {
        DNode newNode = new DNode(element);
        if (tail == null) {
            head = newNode;
            tail = newNode;
            size++;
            System.out.println("Adding element: " + element);
            return;
        }
        tail.next = newNode;
        newNode.prev = tail;
        tail = newNode;
        size++;
        System.out.println("Adding element: " + element);
    }

    public void iterateForward() {
        System.out.println("Iterating forward.");
        DNode tmp = head;
        while (tmp != null) {
            System.out.println(tmp.element);
            tmp = tmp.next;
        }
    }

    public void iterateBackward() {
        System.out.println("Iterating backward.");
        DNode tmp = tail;
        while (tmp != null) {
            System.out.println(tmp.element);
            tmp = tmp.prev;
        }
    }

    public int removeFirst() {
        if (size == 0) throw new NoSuchElementException();
        DNode tmp = head;
        head = head.next;
        if (head != null) {
            head.prev = null;
        } else {
            tail = null;  // List became empty
        }
        size--;
        System.out.println("Deleted element: " + tmp.element);
        return tmp.element;
    }

    public void deleteByElement(int key) {
        DNode current = head;
        while (current != null && current.element != key) {
            current = current.next;
        }
        if (current == null) {
            System.out.println("Node with value " + key + " not found.");
            return;
        }
        if (current.prev != null) {
            current.prev.next = current.next;
        } else {
            head = current.next;
        }
        if (current.next != null) {
            current.next.prev = current.prev;
        } else {
            tail = current.prev;
        }
        current = null;
        size--;
    }

    public void removeLast() {
        if (head == null) {
            System.out.println("List is empty. Cannot remove the last element.");
            return;
        }
        if (head.next == null) {
            head = null;
            tail = null;
            size--;
            return;
        }
        DNode current = tail;
        tail = tail.prev;
        tail.next = null;
        size--;
    }

    public void insertatpos(int item, int position) {
        DNode newNode = new DNode(item);
        if (position == 1 || head == null) {
            newNode.next = head;
            if (head != null) {
                head.prev = newNode;
            }
            head = newNode;
            if (tail == null) {
                tail = newNode;
            }
            size++;
            return;
        }
        DNode current = head;
        int currentPosition = 1;
        while (currentPosition < position - 1 && current.next != null) {
            current = current.next;
            currentPosition++;
        }
        newNode.next = current.next;
        if (current.next != null) {
            current.next.prev = newNode;
        } else {
            tail = newNode; // If inserting at the end
        }
        newNode.prev = current;
        current.next = newNode;
        size++;
    }

    public void insertAfterPosition(int data, int position) {
        DNode newNode = new DNode(data);
        if (position < 1) {
            System.out.print("\nposition should be >= 1.");
        } else if (position == 1) {
            newNode.next = head;
            if (head != null) {
                head.prev = newNode;
            }
            head = newNode;
        } else {
            DNode temp = head;
            for (int i = 1; i < position - 1; i++) {
                if (temp != null) {
                    temp = temp.next;
                }
            }
            if (temp != null) {
                newNode.next = temp.next;
                if (temp.next != null)
                    temp.next.prev = newNode;
                newNode.prev = temp;
                temp.next = newNode;
            } else {
                System.out.print("\nThe previous node is null.");
            }
        }
    }

    public void deletenth(int position) {
        if (head == null) {
            System.out.println("List is empty. Cannot delete the nth node.");
            return;
        }
        if (position == 1) {
            head = head.next;
            if (head != null) {
                head.prev = null;
            } else {
                tail = null;
            }
            size--;
            return;
        }
        DNode current = head;
        int currentPosition = 1;
        while (currentPosition < position && current != null) {
            current = current.next;
            currentPosition++;
        }
        if (current == null) {
            System.out.println("Node at position " + position + " not found.");
            return;
        }
        if (current.prev != null) {
            current.prev.next = current.next;
        }
        if (current.next != null) {
            current.next.prev = current.prev;
        } else {
            tail = current.prev;
        }
        current = null;
        size--;
    }

    public static void main(String[] args) {
        Double dll = new Double();
        Scanner scan = new Scanner(System.in);
        System.out.println("Doubly Linked List Test\n");
        char ch;

        do {
            System.out.println("\nDoubly Linked List Operations\n");
            System.out.println("1. insert at beginning");
            System.out.println("2. insert at end");
            System.out.println("3. insert at position");
            System.out.println("4. delete at beginning");
            System.out.println("5. delete at end");
            System.out.println("6. delete at position");
            System.out.println("7. check empty");
            System.out.println("8. get size");
            System.out.println("9. delete by Element");
            System.out.println("10. Display Backward");
            System.out.println("11. Display Forward");
            int choice = scan.nextInt();
            switch (choice) {
                case 1:
                    System.out.println("Enter integer element to insert");
                    dll.addFirst(scan.nextInt());
                    break;
                case 2:
                    System.out.println("Enter integer element to insert");
                    dll.addLast(scan.nextInt());
                    break;
                case 3:
                    System.out.println("Enter integer element to insert");
                    int num = scan.nextInt();
                    System.out.println("Enter position");
                    int pos = scan.nextInt();
                    System.out.println("size " + dll.getSize());
                    if (pos < 1 || pos > dll.getSize() + 1)
                        System.out.println("Invalid position\n");
                    else
                        dll.insertatpos(num, pos);
                    break;
                case 4:
                    dll.removeFirst();
                    break;
                case 5:
                    dll.removeLast();
                    break;
                case 6:
                    System.out.println("Enter position");
                    int p = scan.nextInt();
                    if (p < 1 || p > dll.getSize())
                        System.out.println("Invalid position\n");
                    else
                        dll.deletenth(p);
                    break;
                case 7:
                    System.out.println("Empty status = " + dll.isEmpty());
                    break;
                case 8:
                    System.out.println("Size = " + dll.getSize() + " \n");
                    break;
                case 9:
                    System.out.println("Enter element to delete");
                    int num1 = scan.nextInt();
                    dll.deleteByElement(num1);
                    break;
                case 10:
                    dll.iterateBackward();
                    break;
                case 11:
                    dll.iterateForward();
                    break;
                default:
                    System.out.println("Wrong Entry \n ");
                    break;
            }
            dll.iterateForward();
            dll.iterateBackward();
            System.out.println("\nDo you want to continue (Type y or n) \n");
            ch = scan.next().charAt(0);
        } while (ch == 'Y' || ch == 'y');
    }
}
